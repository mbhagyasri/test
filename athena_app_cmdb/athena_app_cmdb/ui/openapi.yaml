openapi: 3.0.0
info:
  description: |
    App Registry
    
    The following rules are applicable to all paths below:
    <H3>Validation against Model:</H3>
    <ul><li>Validation against fields will only be applicable to fields listed in the model.
    <li>To include additional attribute to the particular resource, those these attribute inside properties field.  Additional data pushed to <b>properties</b> object field that are not listed will be accepted but will not have any validation performed against them.
    <li>Try to create an object to store similar / functionality instead of adding all attributes as key/value at the first level of properties.
    </ul>
    
    <H3>Filtering Capabilities is applicable to all paths making GET calls.</H3>
    <ul><li>Use dot(.) notation to traverse down the properties object.  
        <ul><li><B>Example:</B> To search for items with properties['parameters']['integrations']['aws']['name'] = 'abc', use: <BR><i>?properties.integrations.aws.name=abc</i> </li>
        </ul>
        </li>
    <li>Use dot(.) notation to traverse through foreign key relationship.  This can be on multilayer foreign key relationship.
      <ul><li><B>Example:</B> To search for assets where its cluster's location's properties['parameters']['integrations']['aws']['id'] = xxxxxx and it belongs to a team with service in its name, use: 
        <BR><i>?cluster.location.properties.parameters.integrations.aws.id=xxxxxx&team.name.icontains=service
      </i>
      <li>In this example, cluster and team are foreign key on the assets model and locations is a foreign key to clusters. 
      </li></ul>
    </li>
    <li>Chaining filters are execute as "AND". Try to use negative expression (excludes) if needing to perform "OR" operations.
    <li><B>Excludes</B>:
      <ul><li> to search for the reverse (is not equal, does not contain, does not startswith) use <b>exclude=</b> infront of the particular query parameter.  </li>
        <ul><li><b>Example:</b> to search for properties['notification'] does not contain FOS and name contains def, use:<BR>
        <i>exclude=properties.notification.icontains=FOS&name.contains=def</i>
        </li>
        </ul></ul></li>
    <li><B>Powerful filter capabilities</B>:<BR>
    include these additional lookups to create powerful fitering:
      <ul><li><b>iexact:</b> case insensitive search. name.iexact=Abc will mach if name is "abc", "ABC", or "Abc"</li>
      <ul><li>SQL equivalents for <B>x.iexact=Abc</B>:
      <ul><li>SELECT ... WHERE ... <B>ILIKE</B> 'Abc'</li></ul></ul>
      <li><b>contains:</b> Case-sensitive containment search.  Use this method to find if an element exist in a list in one of attributes in the properties.
      <ul><li>SQL equivalents for <B>x.contains=Abc</B>:
      <ul><li>SELECT ... WHERE ... <B>LIKE</B> '%Abc%'</li></ul></ul>
      <li><b>icontains:</b> Case-insensitive containment search.
      <ul><li>SQL equivalents for <B>x.icontains=Abc</B>:
      <ul><li>SELECT ... WHERE ... <B>ILIKE</B> '%Abc%'</li></ul></ul>
      <li><b>in:</b> similar to database query for IN queries
      <ul><li>SQL equivalents for <B>x.in=Abc,def,xyz</B>:
      <ul><li>SELECT ... WHERE ... <B>IN</B> ('Abc','def','xyz')</li></ul></ul>
      <li><b>lt / gt / lte / gte</b>: less than / greater than / less than or equal / greater than or equal to (use for integer or date)
      <ul><li>SQL equivalents for <B>x.gt=4</B>:
      <ul><li>SELECT ... WHERE ... <B>></B> 4</li></ul>
      <li>SQL equivalents for <B>x.lte=2005-02-01</B>:
      <ul><li>SELECT ... WHERE ... <B><=</B> '2005-02-01'</li></ul>
      </ul>
      <li><b>isnull</b>: Takes either True or False, which correspond to SQL queries of IS NULL and IS NOT NULL, respectively. Value <B>true/false</b> is case insensitive.
      <ul><li>SQL equivalents for <B>x.isnull=true</B>:
      <ul><li>SELECT ... WHERE x <B>IS NULL</B> </li></ul>
      <li>SQL equivalents for <B>x.isnull=False</B>:
      <ul><li>SELECT ... WHERE x <B>IS NOT NULL</B></li></ul>
      </ul>
      <li><b>year:</b> For date and datetime fields, an exact year match.
      <ul><li>SQL equivalents for <B>created_at.year=2020</B>:
      <ul><li>SELECT ... WHERE created_at <B>BETWEEN</B>'2020-01-01' <B>AND</B> '2020-12-31'</li></ul>
      <li>SQL equivalents for <B>created_at.year.lte=2020</B>:
      <ul><li>SELECT ... WHERE created_at <B><=</B> '2020-01-01'</li></ul>
      </ul>
      <li><b>month:</b> For date and datetime fields, an exact month match.  Takes an integer 1 (January) through 12 (December).
      <ul><li>SQL equivalents for <B>created_at.month=12</B>:
      <ul><li>SELECT ... WHERE ... <B>EXTRACT</B>('month' <B>FROM</B> created_at) = '12'</li></ul>
      <li>SQL equivalents for <B>created_at.month.gte=6</B>:
      <ul><li>SELECT ... WHERE ... <B>EXTRACT</B>('month' <B>FROM</B> created_at) >= '6'</li></ul>
      </ul>
      <li><b>day:</b> For date and datetime fields, an exact day match.
      <li><b>week_day:</b> For date and datetime fields, a ‘day of the week’ match.  Takes an integer value representing the day of week from 1 (Sunday) to 7 (Saturday).
    </ul>
  version: 1.0.61
  title: App Registry
  contact:
    name: Athena Platform Developers
    email: AthenaPlatformDevelopers@cdk.com
servers:
  - url: https://app-registry.athena-connectcdk.com/api

paths:

  '/bulk-update':
    parameters:
      - $ref: '#/components/parameters/IncludeDeletedParam'
    post:
      tags:
        - Bulk Update
      summary: Bulk Create
      description: Bulk create.  Send list of items to be created with the key is the name of the Model.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkUpdate'
                

      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/PageOfLocation'
                  - $ref: '#/components/schemas/PageOfTeam'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'          
    put:
      tags:
        - Bulk Update
      summary: Bulk updates
      description: Send list of items to be updated with the key is the name of the Model.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkUpdate'
                
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/PageOfLocation'
                  - $ref: '#/components/schemas/PageOfTeam'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError' 
    patch:
      tags:
        - Bulk Update
      summary: Bulk Partial updates
      description:  Send list of items to be patch with the key is the name of the Model. For each item, 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkUpdatePatch'
                

      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/PageOfLocation'
                  - $ref: '#/components/schemas/PageOfTeam'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError' 
  '/load-from-excel':
    post:
      tags:
        - Load From Excel
      summary: Load data from LCD
      description: Before loading to excel, make sure to open the file and hit Enable Content.  Save and then load.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                pod_template: 
                  type: string
                  description: excel file
                  format: binary

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadFromExcel'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'          
          
  /environments:
    parameters:
      - $ref: '#/components/parameters/IncludeDeletedParam'
    get:
      tags:
        - Environment
      summary: Lists environments
      parameters:
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/PageParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfEnvironment'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    post:
      tags:
        - Environment
      summary: Creates an environment

      requestBody:
        description: Environment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          $ref: '#/components/responses/EnvironmentValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'          
  '/environments/{id}':
    get:
      tags:
        - Environment
      summary: Returns environment details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:          
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    put:
      tags:
        - Environment
      summary: Updates an environment
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Environment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Environment'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          $ref: '#/components/responses/EnvironmentValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    patch:
      tags:
        - Environment
      summary: Partial updates an environment
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: The uuid of the item to be patched
      requestBody:
        description: Environment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        '200':
          description: OK
          content:
            applications/json:
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          $ref: '#/components/responses/EnvironmentValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    delete:
      tags:
        - Environment
      summary: Deletes an environment
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: The uuid of the item to be patched
        - in: header
          name: X-FORCE-DELETE
          schema:
            type: string
          description:  By default, only attribute deleted change to true but data is still kept in the database.  to force it to clean the record from the database, send value as true.
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'       
  /locations:
    parameters:
      - $ref: '#/components/parameters/IncludeDeletedParam'
    get:
      tags:
        - Location
      summary: Lists locations
      parameters:
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/PageParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfLocation'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    post:
      tags:
        - Location
      summary: Creates a location

      requestBody:
        description: Location
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '400':
          $ref: '#/components/responses/LocationValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'          
  '/locations/{id}':
    get:
      tags:
        - Location
      summary: Returns location details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:          
              schema:
                $ref: '#/components/schemas/Location'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    put:
      tags:
        - Location
      summary: Updates a location
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Location
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '400':
          $ref: '#/components/responses/LocationValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    patch:
      tags:
        - Location
      summary: Partial updates a location
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: The uuid of the item to be patched
      requestBody:
        description: Location
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        '200':
          description: OK
          content:
            applications/json:
              schema:
                $ref: '#/components/schemas/Location'
        '400':
          $ref: '#/components/responses/LocationValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    delete:
      tags:
        - Location
      summary: Deletes a location
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: The uuid of the item to be patched
        - in: header
          name: X-FORCE-DELETE
          schema:
            type: string
          description:  By default, only attribute deleted change to true but data is still kept in the database.  to force it to clean the record from the database, send value as true.
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'       
  /teams:
    parameters:
      - $ref: '#/components/parameters/IncludeDeletedParam'
    get:
      tags:
        - Team
      summary: Lists teams
      parameters:
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/PageParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfTeam'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    post:
      tags:
        - Team
      summary: Creates a team

      requestBody:
        description: Team
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/TeamValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'          
  '/teams/{id}':
    get:
      tags:
        - Team
      summary: Returns team details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:          
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    put:
      tags:
        - Team
      summary: Updates a team
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Team
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/TeamValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    patch:
      tags:
        - Team
      summary: Partial updates a team
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: The uuid of the item to be patched
      requestBody:
        description: Team
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        '200':
          description: OK
          content:
            applications/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/TeamValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    delete:
      tags:
        - Team
      summary: Deletes a team
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: The uuid of the item to be patched
        - in: header
          name: X-FORCE-DELETE
          schema:
            type: string
          description:  By default, only attribute deleted change to true but data is still kept in the database.  to force it to clean the record from the database, send value as true.
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/UnexpectedError'       
components:
  schemas:
    Environment:
      type: object
      properties:
        id: 
          type: string
          format: uuid
          description: Environment Id
          example: e9bfce69-edc3-40f5-8eec-c43ca4b3a346
        name: 
          type: string
          description: Environment Name
          example: dev
        properties:
          type: object
          description: empty properties that could hold other data
        updated_at:
          type: string
          example: '2019-12-12T20:34:59.259865Z'
        updated_by:
          type: string
          example: user@abc.com
        created_at:
          type: string
          example: '2019-12-12T20:34:59.259832Z'
        created_by:
          type: string
          example: user@abc.com
        deleted:
          type: boolean
          example: false
    EnvironmentRequest:
      type: object
      properties:
        id: 
          type: string
          format: uuid
          description: Environment id
          example: e9bfce69-edc3-40f5-8eec-c43ca4b3a346
        name: 
          type: string
          description: Environment Name
          example: dev
      required:
        - name
    PageOfEnvironment:
      type: object
      properties:
        environments:
          type: array
          items:
            $ref: '#/components/schemas/Environment'
        metadata:
          properties:
            links:
              type: object
              properties:
                next:
                  type: string
                  example: 'https://app-registry/api/environments?page=3'
                previous:
                  type: string
                  example: 'https://app-registry/api/environments?page=1'
            count:
              type: number
              description: number of records found
              example: 240
            page:
              type: number
              description: the current page number
              example: 2
            numOfPages:
              type: number
              description: total number of pages
              example: 12
    EnvironmentValidationError:
      type: object
      properties:
        errorMessage:
          type: object
          example:
            name: development
            path: /environments
            Validation Errors: 
              Invalid Fields:
                - required_inputs:
                    name:
                      value is not a valid choice.
                
    Location:
      type: object
      required:
        - name
        - environment
      properties:
        id:
          type: string
          example: 1709673a-9f34-415a-983d-4b521bf8b0eb
        name:
          type: string
          example: aws us-nonprod
        environment:
          type: string
          format: foreign key
          example: 1a603a21-fc6e-431a-b42b-4f05cabd4267
        environment_name:
          type: string
          example: dev
        properties:
          $ref: '#/components/schemas/LocationProperties'
        links:
          type: object
          example:
            _self: /api/locations/1709673a-9f34-415a-983d-4b521bf8b0eb
            environment: /api/environments/623abbfa-e4e4-4077-800b-a72890510d4b
            
        updated_at:
          type: string
          example: '2019-12-12T20:34:59.259865Z'
        updated_by:
          type: string
          example: user@abc.com
        created_at:
          type: string
          example: '2019-12-12T20:34:59.259832Z'
        created_by:
          type: string
          example: user@abc.com
        deleted:
          type: boolean
          example: false
    LocationProperties:
      type: object
      properties:
        domain:
          properties:
            domain: 
              type: string
            region:
              type: string
            status:
              type: string
            parameters:
              type: object
              properties:
                integrations:
                  type: object
                  properties:
                    aws:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        account-type: 
                          type: string
                    okta:
                      type: object
                      properties:
                        url:
                          type: string
          example: 
            domain: athena-nonprod.connectcdk.com
            
    LocationRequest:
      type: object
      required:
        - id
        - name
        - environment

      properties:
        id:
          type: string
          example: 1709673a-9f34-415a-983d-4b521bf8b0eb
        name:
          type: string
          example: aws us-nonprod
        environment:
          type: string
          format: foreign key
          example: 1a603a21-fc6e-431a-b42b-4f05cabd4267
        environment_name:
          type: string
          example: stage
        properties:
          $ref: '#/components/schemas/LocationProperties'
    PageOfLocation:
      type: object
      properties:
        locations:
          type: array
          items:
            $ref: '#/components/schemas/Location'
        metadata:
          properties:
            links:
              type: object
              properties:
                next:
                  type: string
                  example: 'https://app-registry/api/locations?page=3'
                previous:
                  type: string
                  example: 'https://app-registry/api/locations?page=1'
            count:
              type: number
              description: number of records found
              example: 240
            page:
              type: number
              description: the current page number
              example: 2
            numOfPages:
              type: number
              description: total number of pages
              example: 12
    LocationValidationError:
      type: object
      properties:
        errorMessage:
          type: object
          example:
            name: aws us-nonprod
            path: /locations
            Validation Errors: 
              Missing Required Fields:
                - environment                     


    LoadFromExcel:
      type: object
      properties:
        Message:
          type: string
          example: Spreadsheet was upload successfully
        "Sections successfully processed":
          type: array
          items:
            type: string
    PatchRequest:
      type: array
      items:
        $ref: '#/components/schemas/PatchDocument'
    PatchDocument:
      description: A JSONPatch docuemnt as defined by RFC
      required:
        - op
        - path
      properties:
        op:
          type: string
          description: The operation to be performed
          enum:
            - add
            - remove
            - replace
            - move
            - copy
            - test
        path:
          type: string
          description: A JSON-Pointer
          example: /properties/managed_options/os_monitoring/active
        value:
          type: object
          description: The value to be used within the operations.
          example: true
        from:
          type: string
          description: A string containing a JSON Pointer value.
    Team:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          example: 1709673a-9f34-415a-983d-4b521bf8b0eb
        name:
          type: string
          example: abc team
        properties:
          $ref: '#/components/schemas/TeamProperties'
        links:
          type: object
          example:
            _self: /api/teams/1709673a-9f34-415a-983d-4b521bf8b0eb
            
        updated_at:
          type: string
          example: '2019-12-12T20:34:59.259865Z'
        updated_by:
          type: string
          example: user@abc.com
        created_at:
          type: string
          example: '2019-12-12T20:34:59.259832Z'
        created_by:
          type: string
          example: user@abc.com
        deleted:
          type: boolean
          example: false
    TeamProperties:
      type: object
      properties:
        domain:
          properties:
            notification: 
              type: array
            email:
              type: array
            ad-group:
              type: array
    TeamRequest:
      type: object
      required:
        - id
        - name
        - properties.email
        - properties.notification

      properties:
        id:
          type: string
          example: 1709673a-9f34-415a-983d-4b521bf8b0eb
        name:
          type: string
          example: team abc
        properties:
          $ref: '#/components/schemas/TeamProperties'
    PageOfTeam:
      type: object
      properties:
        teams:
          type: array
          items:
            $ref: '#/components/schemas/Team'
        metadata:
          properties:
            links:
              type: object
              properties:
                next:
                  type: string
                  example: 'https://app-registry/api/teams?page=3'
                previous:
                  type: string
                  example: 'https://app-registry/api/teams?page=1'
            count:
              type: number
              description: number of records found
              example: 240
            page:
              type: number
              description: the current page number
              example: 2
            numOfPages:
              type: number
              description: total number of pages
              example: 12
    TeamValidationError:
      type: object
      properties:
        errorMessage:
          type: object
          example:
            name: abc team
            path: /teams
            Validation Errors: 
              Missing Required Fields:
                - properties.email                     
                  
    BulkUpdate:
      type: object
      description: for each model, send a list of objects to process
      properties:
        locations:
          type: array
          items:
            $ref: '#/components/schemas/LocationRequest'
        environments:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentRequest'
    BulkUpdatePatch:
      type: object
      description: for each model, send a list of objects to process
      properties:
        teams:
          type: array
          items:
            properties:
              id: 
                type: string
              patch_data:
                $ref: '#/components/schemas/PatchRequest'
        assets:
          type: array
          items:
            properties:
              id: 
                type: string
              patch_data:
                $ref: '#/components/schemas/PatchRequest'    

    Error:
      type: object
      properties:
        errorMessage:
          type: string

    ValidationError:
      type: object
      properties:
        errorMessage:
          type: object
          example:
            name: abc
            path: /assets
            Validation Errors: 
              Missing Required Fields:
                - properties.repo   

      
  parameters:
    IncludeDeletedParam:
      in: header
      name: X-INCLUDE-DELETED
      schema:
        type: string
      required: false
      description: send true to include deleted items in response
    PageSizeParam:
      in: query
      name: page_size
      schema:
        type: integer
        minimum: 1
        maximum: 1000
        default: 20
      required: false
      description: user can override the number of items to be return for pagination. Default is 20. Max is set to 1000.
    PageParam:
      in: query
      name: page
      schema:
        type: integer
      required: false
      description: specify the page for the query if there are more than 1 page

    
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ValidationError:
      description: Validation Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
    EnvironmentValidationError:
      description: Validation Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EnvironmentValidationError'
    LocationValidationError:
      description: Validation Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LocationValidationError'
    TeamValidationError:
      description: Validation Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TeamValidationError'
    UnexpectedError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Error:
      description: Bad Request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'